generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContentType {
  MOVIE
  TV_SHOW
}

model Movie {
  id          String      @id @default(uuid()) @db.Uuid
  title       String      @db.VarChar(255)
  description String?     @db.Text
  releaseDate DateTime    @map("release_date")
  coverImage  String?     @map("cover_image") @db.VarChar(500)
  type        ContentType @default(MOVIE)

  cast    MovieActor[]
  ratings Rating[]

  averageRating Float? @map("average_rating")
  totalRatings  Int    @default(0) @map("total_ratings")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([type, averageRating])
  @@index([title])
  @@map("movies")
}

model Actor {
  id    String  @id @default(uuid()) @db.Uuid
  name  String  @db.VarChar(255)
  bio   String? @db.Text
  image String? @db.VarChar(500)

  movies MovieActor[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([name])
  @@map("actors")
}

model MovieActor {
  movieId String  @map("movie_id") @db.Uuid
  actorId String  @map("actor_id") @db.Uuid
  role    String? @db.VarChar(255)

  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  actor Actor @relation(fields: [actorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@id([movieId, actorId])
  @@map("movie_actors")
}

model Rating {
  id      String @id @default(uuid()) @db.Uuid
  movieId String @map("movie_id") @db.Uuid
  rating  Int    @db.SmallInt

  sessionId String? @map("session_id") @db.VarChar(255)
  ipAddress String? @map("ip_address") @db.VarChar(45)
  userAgent String? @map("user_agent") @db.Text

  userId String? @map("user_id") @db.Uuid

  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([movieId, sessionId])
  @@unique([movieId, userId])
  @@index([movieId])
  @@index([rating])
  @@map("ratings")
}

model User {
  id       String  @id @default(uuid()) @db.Uuid
  email    String  @unique @db.VarChar(255)
  name     String? @db.VarChar(255)
  avatar   String? @db.VarChar(500)
  provider String  @db.VarChar(50)

  providerId String @map("provider_id") @db.VarChar(255)

  ratings Rating[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([provider, providerId])
  @@index([email])
  @@map("users")
}
